include:
  - project: 'cencosud-ds/cencommerce/utils/pipe-templates'
    ref: 'master'
    file:
      - 'deploy-to-k8s.yml'
      - 'node-linter.yml'

stages:
  - apm
  - check
  - install
  - lint
  - test
  - package
  - sast
  - validate-jira
  - deploy
  - database
  - dast
  - compliance-jira
  - result-security

variables:
  K8S_DEPLOYMENT_NAME: '${CI_PROJECT_NAME}'
  NODE_IMG: 'registry.gitlab.com/cencosud-ds/cencommerce/utils/docker-images/node:18.13.0-alpine3.17'
  SUBDOMAIN: '${CI_PROJECT_NAME}'
  INTERNAL_ENDPOINT: ${SUBDOMAIN}.${HOST}

# RULES
.mr_master:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH

.mr_master_allow_failure:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      allow_failure: true

.mr_master_manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      when: manual

.is_master:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.is_master_manual:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

alpine_version:
  rules:
    - !reference [.mr_master_allow_failure, rules]

api_version:
  rules:
    - !reference [.mr_master, rules]

axios_version:
  rules:
    - !reference [.mr_master, rules]

healthcheck_annotations:
  rules:
    - !reference [.mr_master, rules]

requests:limits:staging:
  rules:
    - !reference [.mr_master, rules]

newrelic:validator:stg:
  rules:
    - !reference [.mr_master, rules]

package:lock:
  rules:
    - !reference [.mr_master, rules]

code_quality:
  rules:
    - !reference [.mr_master, rules]

gemnasium-dependency_scanning:
  rules:
    - !reference [.mr_master, rules]

nodejs-scan-sast:
  rules:
    - !reference [.mr_master, rules]

secret_detection:
  rules:
    - !reference [.mr_master, rules]

semgrep-sast:
  variables:
    SAST_EXCLUDED_PATHS: ''
  rules:
    - !reference [.mr_master, rules]

ccom-sec-semgrep:
  rules:
    - !reference [.mr_master, rules]

tags_deployments:
  rules:
    - !reference [.mr_master, rules]

install:
  stage: install
  image: $NODE_IMG
  variables:
    HC_LIB_FLAGS_TOKEN: $HC_LIB_FLAGS_TOKEN
  dependencies: []
  script:
    - npm ci --cache .npm --prefer-offline --quiet
  tags:
    - private
    - ccom
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
    policy: pull-push
  artifacts:
    paths:
      - node_modules/
    expire_in: '5 days'
  rules:
    - !reference [.mr_master, rules]
    - !reference [.is_master, rules]

.node:
  image: $NODE_IMG

lint:dockerfile:
  stage: lint
  rules:
    - !reference [.mr_master, rules]

prettier:
  image: $NODE_IMG
  before_script: []
  script:
    - npm run format
  dependencies:
    - install
  rules:
    - !reference [.mr_master, rules]

tslint:
  image: $NODE_IMG
  before_script: []
  dependencies:
    - install
  rules:
    - !reference [.mr_master, rules]

typescript:
  stage: lint
  image: $NODE_IMG
  dependencies:
    - install
  script:
    - npm run compile
  rules:
    - !reference [.mr_master, rules]

cspell:
  stage: lint
  image: $NODE_IMG
  dependencies:
    - install
  script:
    - npm run spell
  rules:
    - !reference [.mr_master, rules]

unit-testing:
  stage: test
  image: $NODE_IMG
  script:
    - npm run test:ci
  dependencies:
    - install
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - coverage/cobertura-coverage.xml
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  tags:
    - private
    - ccom
    - staging
  rules:
    - !reference [.mr_master, rules]

pkg:container:
  variables:
    BUILD_IMAGE_EXTRA_ARGS: '--build-arg APP_PORT=${APP_PORT} --quiet'
  dependencies:
    - install
  rules:
    - !reference [.mr_master, rules]
    - !reference [.is_master, rules]

container_scanning:
  rules:
    - !reference [.mr_master, rules]

validate-jira:branch:
  dependencies: []
  needs: []
  rules:
    - !reference [.mr_master_allow_failure, rules]

validate-jira:master:
  dependencies: []
  needs: []

staging:
  dependencies: []
  needs:
    - job: pkg:container
    - job: validate-jira:branch
      optional: true
    - job: validate-jira:master
      optional: true
  allow_failure: true
  rules:
    - !reference [.mr_master_manual, rules]
    - !reference [.is_master_manual, rules]

production:
  dependencies: []
  needs:
    - job: pkg:container
    - job: validate-jira:master

.database:
  stage: database
  image: $NODE_IMG
  dependencies:
    - install
  script:
    - npm run db:update && npm run db:seed
  allow_failure: true
  tags:
    - private
    - ccom

db:stg:
  extends: .database
  environment: staging
  needs: ['install', 'staging']
  tags:
    - spp
  rules:
    - !reference [.mr_master_manual, rules]
    - !reference [.is_master_manual, rules]

db:prod:
  extends: .database
  environment: production
  needs: ['install', 'production']
  rules:
    - !reference [.is_master_manual, rules]

staging_dast:
  needs:
    - staging
  rules:
    - if: '$DAST_DISABLED'
      when: never
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: delayed
      start_in: 15 seconds

production_dast:
  needs:
    - production
  rules:
    - if: '$DAST_DISABLED'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: delayed
      start_in: 15 seconds
